import asyncio
import os
import logging

from aiogram import F, Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç –∫–æ–ª–ª–±–µ–∫–æ–≤
from callback import register_callbacks
from user_manager import UserManager



"""============== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö/–ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö =============="""
load_dotenv()

tokenTg=os.getenv("TELEGRAM_TOKEN")
bot = Bot(token=tokenTg)
dp = Dispatcher()
user_manager = UserManager()

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)



"""============== –†–∞–±–æ—á–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ =============="""
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ
async def on_startup():
    # –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
    await user_manager.connect()
    logging.info("RabbitMQ –ø–æ–¥–∫–ª—é—á–µ–Ω")

# –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ
async def on_shutdown():
    # –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞
    await user_manager.close()
    logging.info("RabbitMQ –æ—Ç–∫–ª—é—á–µ–Ω")

# –ú–µ–Ω—é –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
async def show_start_menu(chat_id: int, user: types.User, bot: Bot):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–µ—Å–≤—Ç–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —Ä–æ–ª—å
    is_admin, role = await user_manager.check_user(f'@{user.username}' or "")
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.username} - is_admin={is_admin}. –ï–≥–æ —Ä–æ–ª—å - {role}")

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    button_about = InlineKeyboardButton(
        text='–û–ø–∏—Å–∞–Ω–∏–µ',
        callback_data='about'
    )
    buttons_row = [button_about]

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if role == 'ADMIN':
        button_users = InlineKeyboardButton(
            text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
            callback_data='users'
        )
        buttons_row.insert(0, button_users)

    markup = InlineKeyboardMarkup(
        inline_keyboard=[buttons_row],
        resize_keyboard=True
    )

    await bot.send_message(
        chat_id=chat_id,
        text=f"–ü—Ä–∏–≤–µ—Ç, {user.full_name}! \n–Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫. –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é",
        reply_markup=markup
    )



"""============== –•–µ–Ω–¥–ª—ã –¥–ª—è –±–æ—Ç–∞ =============="""
# –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
@dp.message(Command("start", "menu"))
@dp.message(F.text == "‚¨ÖÔ∏è Menu")
async def handle_start(message: types.Message):
    await show_start_menu(message.chat.id, message.from_user, bot)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û–ø–∏—Å–∞–Ω–∏–µ"
@dp.message(Command("about"))
@dp.message(F.text == '–û–ø–∏—Å–∞–Ω–∏–µ')
async def handle_about(message: types.Message):
    button_url = InlineKeyboardButton(
        text="–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
        url="https://github.com/VadimMor/Bot-for-pull-request"
    )
    button_menu = InlineKeyboardButton(
        text='‚¨ÖÔ∏è Menu',
        callback_data="menu"
    )
    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [button_url, button_menu]
        ]
    )
    
    await message.answer(
        text="Bot for pull requests ü§ñ ‚Äî —ç—Ç–æ —É–¥–æ–±–Ω—ã–π –±–æ—Ç –¥–ª—è GitHub, –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö Pull Request –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è—Ö. –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ. üîóüëá",
        reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—á–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def other_text(message: types.Message):
    button_menu = KeyboardButton(text='‚¨ÖÔ∏è Menu')
    markup = ReplyKeyboardMarkup(keyboard=[[button_menu]], resize_keyboard=True)

    await message.answer(
        text="‚ùå –û—à–∏–±–∫–∞! –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.",
        reply_markup=markup
    )


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
register_callbacks(dp)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.basicConfig(level=logging.INFO)
    await on_startup()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RabbitMQ
    
    try:
        await dp.start_polling(bot)
    finally:
        await on_shutdown()

if __name__ == '__main__':
    asyncio.run(main())